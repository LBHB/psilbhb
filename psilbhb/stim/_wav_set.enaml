from functools import partial
import itertools
from pathlib import Path

import numpy as np
from scipy import signal
from scipy.io import wavfile

from psiaudio import queue

from psiaudio.stim import Waveform, FixedWaveform, ToneFactory, \
    WavFileFactory, WavSequenceFactory, wavs_from_path

from psi.token.api import ContinuousBlock
from psi.context.api import (BoolParameter, ContextGroup, ContextRow, EnumParameter,
                             SequenceSelector, Parameter, Result)

from wav_set import WavFileSet, MultichannelWaveFileSet, FgBgSet

import logging
log = logging.getLogger(__name__)


enamldef MultichannelWaveFileStim(EpochBlock):
    
    #factory = BigNaturalSequenceFactory
    name = 'Multichannel Wave File Set'
    label = 'multiwav'

    Parameter:
        name = 'path'
        label = 'folder'
        dtype = 'S'

    Parameter:
        name = 'level'
        label = 'level (dB peSPL)'
        dtype = 'double'

    Parameter:
        name = 'duration'
        label = 'duration (s)'
        default = -1
        dtype = 'double'

    EnumParameter:
        name = 'normalization'
        label = 'normalization'
        compact_label = 'norm'
        default = 'max'
        choices = {'max': "'pe'", 'RMS': "'rms'", 'fixed': "'fixed'"}

    Parameter:
        name = 'norm_fixed_scale'
        label = 'fixed norm value'
        default = 1
        dtype = 'double'

    Parameter:
        name = 'fit_range'
        label = 'Fit Index Range'
        expression = 'slice(None)'
        dtype = 'object'

    Parameter:
        name = 'fit_reps'
        label = 'Fit Reps'
        default = 1
        dtype = 'double'

    Parameter:
        name = 'test_range'
        label = 'Test Index Range'
        expression = 'slice(0)'
        dtype = 'object'

    Parameter:
        name = 'test_reps'
        label = 'Test Reps'
        default = 1
        dtype = 'double'

    Parameter:
        name = 'channel_count'
        label = 'number of channels'
        default = 1
        dtype = 'int'

    Parameter:
        name = 'binaural_combinations'
        label = 'how to combine wavs for binaural condition'
        compact_label = 'bin_comb'
        default = 'single_offset'
        choices = {'single_offset': "'single_offset'", 'all': "'all'"}

    Parameter:
        name = 'channel_offset'
        label = 'index offset between binaural stim'
        default = 1
        dtype = 'int'

    # Calibration?