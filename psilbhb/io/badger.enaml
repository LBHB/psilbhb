from enaml.workbench.api import Extension

from psi.controller.engines.nidaq import (NIDAQEngine,
                                          NIDAQHardwareAIChannel,
                                          NIDAQHardwareAOChannel,
                                          NIDAQHardwareDOChannel,
                                          NIDAQSoftwareDOChannel,
                                          )

from psi.core.enaml.api import ExperimentManifest
from psi.controller.api import ADC


from psiaudio.calibration import FlatCalibration


# Requested sampling rate must be an integer divisor of the timebase clock.
ao_fs = 20e6 / 454
ai_fs = 20e6 / 454


from psi.controller.api import Trigger, Toggle


enamldef IRChannel(NIDAQHardwareAIChannel): irc:

    unit = 'V'
    start_trigger = '/Dev1/ao/StartTrigger'
    fs = ai_fs
    expected_range = (-10, 10)
    dtype = 'float64'
    terminal_mode = 'RSE'

    ADC: adc:
        name << irc.name


enamldef IOManifest(ExperimentManifest): manifest:

    Extension:
        id = 'backend'
        point = 'psi.controller.io'

        NIDAQEngine:
            name = 'NI'
            hw_ai_monitor_period = 0.1
            hw_ao_monitor_period = 0.1
            hw_ao_buffer_size = 2
            #hw_ai_monitor_period = 0.2
            #hw_ao_buffer_size = 5

            NIDAQHardwareAIChannel:
                label = 'Speaker 1 monitor'
                name = 'speaker_1_monitor'
                channel = 'Dev1/ai3'
                start_trigger = '/Dev1/ao/StartTrigger'
                fs = ai_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration_user_editable = True

            NIDAQHardwareAIChannel:
                label = 'Microphone 1'
                name = 'microphone_1'
                channel = 'Dev1/ai6'
                start_trigger = '/Dev1/ao/StartTrigger'
                fs = ai_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration_user_editable = True

            #NIDAQHardwareAIChannel:
            #    label = 'Microphone 2'
            #    name = 'microphone_2'
            #    channel = 'Dev1/ai7'
            #    start_trigger = '/Dev1/ao/StartTrigger'
            #    fs = ai_fs
            #    expected_range = (-10, 10)
            #    dtype = 'float64'
            #    terminal_mode = 'RSE'
            #    unit = 'V'
            #    calibration_user_editable = True

            NIDAQHardwareAIChannel:
                label = 'Sync Monitor'
                name = 'sync_monitor'
                channel = 'Dev1/ai4'
                start_trigger = '/Dev1/ao/StartTrigger'
                fs = ai_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration = FlatCalibration.from_mv_pa(2.38)

            NIDAQHardwareAOChannel:
                label = 'Speaker 1'
                name = 'speaker_1'
                channel = '/Dev1/ao0'
                fs = ao_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration = FlatCalibration.from_spl(80, vrms=5/(2**.5))

            NIDAQHardwareAOChannel:
                label = 'Speaker 2'
                name = 'speaker_2'
                channel = '/Dev1/ao1'
                fs = ao_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration = FlatCalibration.from_spl(80, vrms=5/(2**.5))

            NIDAQHardwareDOChannel:
                label = 'Sync Trigger'
                name = 'sync_trigger'
                channel = '/Dev1/port0/line3'
                sample_clock = '/Dev1/ao/SampleClock'
                fs = ao_fs

            NIDAQSoftwareDOChannel:
                name = 'water_dispense_1'
                channel = 'Dev1/port0/line0'

                # You can have multiple triggers connected to a single
                # software-timed digital output. The behavior programs will
                # only use one of these triggers. For the NAFC, it will look
                # for the `water_dispense_1` and `water_dispense_2` triggers.
                # For the go-nogo, it will look for the `water_dispense`
                # trigger. By providing both triggers, we can make sure that
                # each program continues to work properly.
                Trigger:
                    name = 'water_dispense'

                Trigger:
                    name = 'water_dispense_1'

            NIDAQSoftwareDOChannel:
                name = 'water_dispense_2'
                channel = 'Dev1/port0/line2'

                # This is for the second lick spout added to support the 2AFC
                # experiment (I call it NAFC and will be writing it so it can
                # support an arbitrary number of alternate forced choices).
                Trigger:
                    name = 'water_dispense_2'

            NIDAQSoftwareDOChannel:
                name = 'room_light'
                channel = 'Dev1/port0/line1'

                Toggle:
                    # This is a required output for the room light. The plugin
                    # will look for this output by name. If not present, the
                    # room light plugin will not work!
                    name = 'room_light_toggle'
                    label = 'Room light'

            # We maek the same input channel available under two names,
            # reward_contact and spout_contact_1, so that we can easily switch
            # between the go-nogo and NAFC experiments. Well, easily from a
            # software perspective. You still will need to go into the chamber
            # and remove the second lick spout so the ferret doesn't try to use
            # it.
            IRChannel:
                # For go-nogo
                name = 'reward_contact'
                label = 'Reward IR'
                channel = 'Dev1/ai0'

            IRChannel:
                # For go-nogo and NAFC
                name = 'np_contact'
                label = 'Nose-poke IR'
                channel = 'Dev1/ai1'

            IRChannel:
                # for NAFC
                name = 'spout_contact_1'
                label = 'Spout IR 1'
                channel = 'Dev1/ai0'

            IRChannel:
                # for NAFC
                name = 'spout_contact_2'
                label = 'Spout IR 2'
                channel = 'Dev1/ai2'
