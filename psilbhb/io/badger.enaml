from enaml.workbench.api import Extension

from psi.controller.engines.nidaq import (NIDAQEngine,
                                          NIDAQHardwareAIChannel,
                                          NIDAQHardwareAOChannel,
                                          NIDAQSoftwareDOChannel,
                                          )

from psi.core.enaml.api import ExperimentManifest
from psi.controller.api import ADC

from psiaudio.calibration import FlatCalibration


# Requested sampling rate must be an integer divisor of the timebase clock.
ao_fs = 20e6 / 454
ai_fs = 20e6 / 454
#ao_fs = 100e3
#ai_fs = 100e3


from psi.controller.api import Trigger, Toggle


enamldef IRChannel(NIDAQHardwareAIChannel): irc:

    unit = 'V'
    start_trigger = '/Dev1/ao/StartTrigger'
    fs = ai_fs
    expected_range = (-10, 10)
    dtype = 'float64'
    terminal_mode = 'RSE'

    ADC: adc:
        name << irc.name


enamldef IOManifest(ExperimentManifest): manifest:

    Extension:
        id = 'backend'
        point = 'psi.controller.io'

        NIDAQEngine:
            name = 'NI'
            hw_ai_monitor_period = 0.125

            NIDAQHardwareAIChannel:
                label = 'Microphone 1'
                name = 'microphone_1'
                channel = 'Dev1/ai6'
                start_trigger = '/Dev1/ao/StartTrigger'
                fs = ai_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration_user_editable = True

            NIDAQHardwareAIChannel:
                label = 'Microphone 2'
                name = 'microphone_2'
                channel = 'Dev1/ai4'
                start_trigger = '/Dev1/ao/StartTrigger'
                fs = ai_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration_user_editable = True

            NIDAQHardwareAIChannel:
                label = 'Microphone 3'
                name = 'microphone_3'
                channel = 'Dev1/ai2'
                start_trigger = '/Dev1/ao/StartTrigger'
                fs = ai_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration = FlatCalibration.from_mv_pa(2.38)

            NIDAQHardwareAOChannel:
                label = 'Speaker 1'
                name = 'speaker_1'
                channel = '/Dev1/ao1'
                fs = ao_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration = FlatCalibration.from_spl(80, vrms=5/(2**.5))

            NIDAQHardwareAOChannel:
                label = 'Speaker 2'
                name = 'speaker_2'
                channel = '/Dev1/ao0'
                fs = ao_fs
                expected_range = (-10, 10)
                dtype = 'float64'
                terminal_mode = 'RSE'
                unit = 'V'
                calibration = FlatCalibration.from_spl(80, vrms=5/(2**.5))

            NIDAQSoftwareDOChannel:
                name = 'water_dispense'
                channel = 'Dev1/port0/line0'

                Trigger:
                    label = 'Water dispense'
                    name = 'water_dispense'

            NIDAQSoftwareDOChannel:
                name = 'room_light'
                channel = 'Dev1/port0/line1'

                Toggle:
                    # This is a required output for the room light. The plugin will
                    # look for this output by name. If not present, the room light
                    # plugin will not work!
                    name = 'room_light_toggle'
                    label = 'Room light'

            IRChannel:
                name = 'reward_contact'
                label = 'Reward IR'
                channel = 'Dev1/ai0'
