import logging
log = logging.getLogger(__name__)
import enum
from functools import partial

from atom.api import Bool, Int, Typed, Value
from enaml.core.api import Conditional
from enaml.application import deferred_call
from enaml.widgets.api import Action, Label, VGroup
from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import Parameter

from psi.controller.api import (ControllerManifest, ControllerPlugin,
                                ExperimentAction, ExperimentEvent,
                                ExperimentState)

from psi.core.enaml.api import ExperimentManifest
from psi.data.sinks.api import EventLog, SDTAnalysis, TrialLog
from psi.experiment.api import StatusItem
from psi.util import rpc


class TrialState(enum.Enum):
    pass


class TrialType(enum.Enum):
    pass


def get_status(trial, trial_type, trial_state, experiment_state):
    # Experiment not running
    if experiment_state == 'paused':
        return 'Experiment paused'
    elif experiment_state == 'initialized':
        return 'Waiting to start'
    elif experiment_state == 'stopped':
        return 'Experiment complete'

    state = '' if trial_state is None else trial_state.value

    # Experiment running
    if '_' in trial_type.value:
        general, specific = trial_type.value.split('_', 1)
        label = '{} ({})'.format(general, specific.replace('_', ' '))
    else:
        label = trial_type.value
    return 'Trial {} {} - {}'.format(trial, label, state)


def get_state(trial_state):
    if trial_state is None:
        return ''
    else:
        return trial_state.value.capitalize()


def process_et(event):
    plugin = event.workbench.get_plugin('psi.controller')
    name = event.parameters['name']
    events = event.parameters['data'].events
    for _, (edge, ts) in events[['event', 'ts']].iterrows():
        plugin.et_callback(name, edge, ts)


def update_trial_log(event):
    core = event.workbench.get_plugin('enaml.workbench.core')
    core.invoke_command('trial_log.save', {'data': event.parameters['result']})
    core.invoke_command('sdt_analysis.update', {'data': event.parameters['result']})


enamldef BaseGoNogoMixin(ExperimentManifest): manifest:

    id = 'base_gonogo_mixin'
    required = True

    Extension:
        id = manifest.id + '.status'
        point = 'psi.experiment.status'

        StatusItem:
            label = 'Experiment state'
            Label:
                text << get_status(
                    workbench.get_plugin('psi.controller').trial,
                    workbench.get_plugin('psi.controller').trial_type,
                    workbench.get_plugin('psi.controller').trial_state,
                    workbench.get_plugin('psi.controller').experiment_state,
                )

    Extension:
        id = manifest.id + '.data'
        point = 'psi.data.sinks'
        EventLog:
            show_widget = True
        TrialLog:
            show_widget = True
        SDTAnalysis:
            pass

    Extension:
        id = manifest.id + '.commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'psi.controller.process_et'
            handler = process_et
        Command:
            id = 'psi.controller.update_trial_log'
            handler = update_trial_log
        Command:
            id = 'psi.controller.prepare_trial'
            handler = rpc('psi.controller', 'prepare_trial')
        Command:
            id = 'psi.controller.start_trial'
            handler = rpc('psi.controller', 'start_trial')

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'

        ExperimentState:
            name = 'trial'

        # This action is mandatory and must be executed before any other
        # commands that require some information from context. By default, an
        # infinite number of cycles are specified.
        ExperimentAction:
            event = 'experiment_initialize'
            command = 'psi.context.initialize'
            kwargs = {'selector': None}
        ExperimentAction:
            event = 'trial_end'
            command = 'psi.controller.update_trial_log'


################################################################################
# Useful plugins
################################################################################
enamldef BaseRewardDispenser(ExperimentManifest): manifest:

    attr duration
    attr output_name
    attr label

    #: Name of event to deliver reward for
    attr event_name = 'deliver_reward'

    Extension:
        id = manifest.id + '.actions'
        point = 'psi.controller.actions'
        ExperimentAction:
            event = event_name
            command = f'{manifest.output_name}.fire'
            kwargs = {'duration': C.lookup(manifest.parameter_name)}

    Extension:
        id = manifest.id + '.status_item'
        point = 'psi.experiment.status'

        StatusItem:
            label = f'Total dispensed ({manifest.label})'
            Label:
                text << str(workbench \
                            .get_plugin('psi.controller') \
                            .get_output(manifest.output_name) \
                            .total_fired)

    Extension:
        id = manifest.id + '.toolbar'
        point = 'psi.experiment.toolbar'
        rank = 2000
        Action:
            text = f'Dispense ({manifest.label})'
            triggered ::
                controller = workbench.get_plugin('psi.controller')
                controller.invoke_actions('deliver_reward')
            enabled <<  workbench.get_plugin('psi.controller').experiment_state \
                not in ('initialized', 'stopped')


enamldef WaterBolusDispenser(BaseRewardDispenser): manifest:

    id = f'{output_name}_bolus_dispenser'
    label = f'{output_name.replace("_", " ").capitalize()}'
    required = True

    # Name of output connected to solenoid for water dispenser
    attr output_name = 'water_dispense'
    attr parameter_name = f'{manifest.output_name}_duration'

    Extension:
        id = manifest.id + '.parameters'
        point = 'psi.context.items'

        Parameter:
            name = manifest.parameter_name
            label = f'{manifest.label} trigger duration (s)'
            compact_label = 'D'
            default = 1
            scope = 'arbitrary'
            group_name = 'trial'


enamldef PelletDispenser(BaseRewardDispenser): manifest:

    duration = 0.1
    output_name = 'pellet_dispense'


################################################################################
# Base controllers
################################################################################
class BaseBehaviorPlugin(ControllerPlugin):

    #: Must define event_map as an attribute on the subclass. Keys will be a
    #: tuple of (edge, event_type) where edge is either 'rising' or 'falling'
    #: and event_type indicates the type of event (e.g., reward contact). The
    #: key ('rising', 'reward_contact') indicates that a rising edge was
    #: detected on the 'reward_contact' input, indicating that the animal has
    #: begun attempting ot retrive a reward. See `handle_event`.
    event_map = {}

    #: Has a remind trial been requested?
    _remind_requested = Bool(False)

    #: Current trial number
    trial = Int(0)

    #: Type of trial (e.g., go, nogo, go_remind, nogo_repeat, etc.)
    trial_type = Typed(TrialType)

    #: What was the result of the prior trial? This is used in the event that
    #: the next trial depends on the previous one.
    prior_score = Value()

    #: Info about the trial that will get saved to the trial log
    trial_info = Typed(dict, ())

    #: Current state of the trial (see BaseGoNogoTrialState for some possible
    #: states).
    trial_state = Typed(TrialState)

    def get_event_info(self):
        return {
            'trial': self.trial
        }

    def can_modify(self):
        return True

    def pause_experiment(self):
        if self.can_modify():
            self._pause_experiment()
            return True
        return False

    def _pause_experiment(self):
        self.experiment_state = 'paused'
        self._pause_requested = False
        self.invoke_actions('experiment_paused', self.get_ts())

    def resume_experiment(self):
        if self.can_modify():
            self._resume_experiment()
            self.prepare_trial()
            return True
        return False

    def _resume_experiment(self):
        self.experiment_state = 'running'
        self._resume_requested = False
        self.invoke_actions('experiment_resumed', self.get_ts())

    def apply_changes(self):
        raise NotImplementedError

    def _apply_changes(self, prepare_trial=True):
        log.info('Applying changes')
        self.context.apply_changes()
        self._apply_requested = False
        if prepare_trial:
            self.prepare_trial()

    def request_remind(self):
        self._remind_requested = True
        if self.can_modify():
            self.prepare_trial(auto_start=True)

    def et_callback(self, name, edge, event_time):
        log.debug('Detected {} on {} at {}'.format(edge, name, event_time))
        event = self.event_map[edge, name]
        self.handle_event(event, event_time)

    def handle_event(self, event, timestamp=None):
        # Ensure that we don't attempt to process several events at the same
        # time. This essentially queues the events such that the next event
        # doesn't get processed until `_handle_event` finishes processing the
        # current one.

        # Only events generated by NI-DAQmx callbacks will have a timestamp.
        # Since we want all timing information to be in units of the analog
        # output sample clock, we will capture the value of the sample clock
        # if a timestamp is not provided. Since there will be some delay
        # between the time the event occurs and the time we read the analog
        # clock, the timestamp won't be super-accurate. However, it's not
        # super-important since these events are not reference points around
        # which we would do a perievent analysis. Important reference points
        # would include nose-poke initiation and withdraw, reward contact,
        # sound onset, lights on, lights off. These reference points will
        # be tracked via NI-DAQmx or can be calculated (i.e., we know
        # exactly when the target onset occurs because we precisely specify
        # the location of the target in the analog output buffer).
        if timestamp is None:
            timestamp = self.get_ts()
        # TODO: let's keep this in the original thread? Should we just use
        # a lock rather than a deferred call?
        deferred_call(self._handle_event, event, timestamp)

    def _handle_event(self, event, timestamp):
        '''
        Give the current experiment state, process the appropriate response for
        the event that occured. Depending on the experiment state, a particular
        event may not be processed.
        '''
        log.debug('Recieved handle_event signal for {}'.format(event.name))
        self.invoke_actions(event.name, timestamp)
        if self.experiment_state == 'paused':
            # If the experiment is paused, don't do anything.
            return
        getattr(self, f'handle_{self.trial_state.name}')(event, timestamp)

    def start_event_timer(self, duration, event):
        # We call the timer `experiment_state` to ensure that it properly ends
        # any existing event-based timers.
        if isinstance(duration, str):
            duration = self.context.get_value(duration)
        log.info('Timer for {} with duration {}'.format(event, duration))
        callback = partial(self.handle_event, event)
        deferred_call(self.stop_timer, 'event')
        deferred_call(self.start_timer, 'experiment_state', duration, callback)

    def stop_event_timer(self):
        deferred_call(self.stop_timer, 'event')


from psi.data.plots import FFTContainer, ViewBox, FFTChannelPlot


enamldef SignalFFTViewManifest(ExperimentManifest): manifest:

    id = 'signal_fft_view'
    title = 'Signal view (PSD)'

    alias fft_time_span: fft_plot.time_span
    alias fft_freq_lb: fft_container.freq_lb
    alias fft_freq_ub: fft_container.freq_ub
    alias source_name: fft_plot.source_name
    alias y_label: fft_vb.y_label
    alias apply_calibration: fft_plot.apply_calibration
    alias waveform_averages: fft_plot.waveform_averages

    Extension:
        id = manifest.id  + '.plots'
        point = 'psi.data.plots'

        FFTContainer: fft_container:
            name << manifest.name + '_container'
            label << manifest.title
            freq_lb = 5
            freq_ub = 50000

            ViewBox: fft_vb:
                name << manifest.name + '_vb'
                y_min = -10
                y_max = 100
                y_mode = 'mouse'
                save_limits = True

                FFTChannelPlot: fft_plot:
                    name << manifest.name + '_plot'
                    source_name = 'microphone'
                    pen_color = 'k'
                    time_span = 0.25

                #FFTChannelPlot: fft_plot:
                #    name << manifest.name + '_cal_plot'
                #    source_name = 'cal_microphone'
                #    pen_color = 'blue'
                #    time_span = 0.25
