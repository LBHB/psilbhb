from enaml.workbench.api import Extension
from enaml.workbench.core.api import Command

from psi.context.api import (
    BoolParameter, EnumParameter, ContextGroup, ContextRow, Parameter, Result
)

from psi.core.enaml.api import ExperimentManifest

from psilbhb.stim.wav_set import MCWavFileSet, FgBgSet, VowelSet, CategorySet

# TODO automate this part


def configure_fgbg_stimuli(event):
    # change to def configure_fgbg(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    output = controller.get_output('output_1')
    params = context.get_values()

    # figure out intersection between user-provided params and valid
    # params for the class to initialize
    plist = FgBgSet.default_parameters
    vkey_list = [p['name'] for p in plist if p.get('type','') != 'Result']
    ukey_list = list(params.keys())
    uvparams = {k: params[k] for k in vkey_list if if k in ukey_list}

    controller.wavset = FgBgSet(**uvparams)


enamldef FgBgSetManifest(ExperimentManifest): manifest:

    id = 'fgbgset'

    Extension:
        id = manifest.id + '.behavior_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'configure_stimuli'
            handler = configure_fgbg_stimuli

    Extension:
        id = manifest.id + '.items'
        point = 'psi.context.items'
"""
    default_parameters = [
        {'name': 'fg_path', 'label': 'FG path', 'default': 'h:/sounds/vocalizations/v4', 'dtype': 'str'},
        {'name': 'bg_path', 'label': 'BG path', 'default': 'h:/sounds/backgrounds/v3', 'dtype': 'str'},
        {'name': 'fg_range', 'label': 'FG wav indexes', 'expression': '[0]'},
        {'name': 'bg_range', 'label': 'BG wav indexes', 'expression': '[0]'},

        {'name': 'fs', 'label': 'Sampling rate (sec^-1)', 'default': 44000, },
        {'name': 'normalization', 'label': 'Normalization', 'default': 'rms', 'type': 'EnumParameter',
         'choices': {'max': "'pe'", 'RMS': "'rms'", 'fixed': "'fixed'"}},
        {'name': 'fg_level', 'label': 'FG level(s) dB SNR', 'expression': '[55]', 'dtype': object},
        {'name': 'bg_level', 'label': 'BG level(s) dB SNR', 'expression': '[55]', 'dtype': object},
        {'name': 'duration', 'label': 'FG/BG duration (s)', 'default': 3.0, 'dtype': float},

        {'name': 'primary_channel', 'label': 'Primary FG channel', 'default': 0, 'dtype': int},
        {'name': 'fg_switch_channels', 'label': 'Switch FG channel', 'type': 'BoolParameter', 'default': False, 'dtype': bool},
        {'name': 'combinations', 'label': 'How to combine FG+BG', 'default': 'all', 'type': 'EnumParameter',
         'choices': {'simple': "'simple'", 'all': "'all'"}},

        {'name': 'contra_n', 'label': 'Contra BG portion (int)', 'default': 1, 'dtype': int},
        {'name': 'diotic_n', 'label': 'Diotic BG portion (int)', 'default': 0, 'dtype': int},
        {'name': 'ipsi_n', 'label': 'Ipsi BG portion (int)', 'default': 0, 'dtype': int},

        {'name': 'migrate_fraction', 'label': 'Percent migrate trials', 'default': 0.0, 'type': 'EnumParameter',
         'choices': {'0': 0.0, '25': 0.25, '50': 0.5}},
        {'name': 'migrate_start', 'label': "migrate_start (s)", 'default': 0.5, 'dtype': float},
        {'name': 'migrate_stop', 'label': "migrate_stop (s)", 'default': 1.0, 'dtype': float},

        {'name': 'response_window', 'label': 'Response start,stop (s)', 'expression': '(0, 1)'},
        {'name': 'reward_ambiguous_frac', 'label': 'Frac. reward ambiguous', 'default': 1.0, 'dtype': float},

        {'name': 'random_seed', 'label': 'Random seed', 'default': 0, 'dtype': int},

        {'name': 'fg_channel', 'label': 'FG chan', 'type': 'Result'},
        {'name': 'bg_channel', 'label':  'BG chan', 'type': 'Result'},
        {'name': 'fg_name', 'label':  'FG', 'type': 'Result'},
        {'name': 'bg_name', 'label':  'BG', 'type': 'Result'},
        {'name': 'this_snr', 'label':  'Trial SNR', 'type': 'Result'},
        {'name': 'migrate_trial', 'label':  'Moving Tar', 'type': 'Result'},
    ]
"""
        ContextGroup:
            # FgBgSet generates a waveform for each trial
            # has two children: FgSet and BgSet, both of
            # which are instances of MultichannelWaveformSet
            # and are defined below
            name = 'FgBgSet'

            Parameter:
                name = 'fg_path'
                label = 'FG wav folder'
                default = 'h:/sounds/vocalizations/v4'
                dtype = 'S'
                scope = 'experiment'

            Parameter:
                name = 'bg_path'
                label = 'BG wav folder'
                default = 'h:/sounds/backgrounds/v3'
                dtype = 'S'
                scope = 'experiment'

            Parameter:
                name = 'fg_range'
                label = 'FG Index Range'
                expression = 'slice(None)'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'bg_range'
                label = 'BG Index Range'
                expression = 'slice(None)'
                dtype = 'object'
                scope = 'experiment'

            EnumParameter:
                name = 'normalization'
                label = 'normalization'
                compact_label = 'norm'
                default = 'max'
                choices = {'max': "'pe'", 'RMS': "'rms'", 'fixed': "'fixed'"}
                scope = 'experiment'

            Parameter:
                name = 'norm_fixed_scale'
                label = 'fixed norm value'
                default = 1
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'fg_level'
                label = 'FG level (dB peSPL)'
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'bg_level'
                label = 'FG level (dB peSPL)'
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'duration'
                label = 'duration (s)'
                default = 3.0
                dtype = 'double'
                scope = 'experiment'

            EnumParameter:
                name = 'primary_channel'
                label = 'Primary FG channel'
                compact_label = 'primary_channel'
                default = '0'
                choices = {'0': 0, '1': 1}
                scope = 'experiment'

            EnumParameter:
                name = 'fg_switch_channels'
                label = 'Switch FG channel'
                compact_label = 'fg_switch_channels'
                default = 'No'
                choices = {'No': "False", 'Yes': "True"}
                scope = 'experiment'

            EnumParameter:
                name = 'combinations'
                label = 'how to combine fg and bg waveforms'
                compact_label = 'combinations'
                default = 'all'
                choices = {'simple': "'simple'", 'all': "'all'"}
                scope = 'experiment'

            Parameter:
                name = 'contra_n'
                label = 'Contra BG portion (int)'
                default = 1
                dtype = 'int'
                scope = 'experiment'

            Parameter:
                name = 'diotic_n'
                label = 'Diotic BG portion (int)'
                default = 0
                dtype = 'int'
                scope = 'experiment'

            Parameter:
                name = 'ipsi_n'
                label = 'Ipsi BG portion (int)'
                default = 0
                dtype = 'int'
                scope = 'experiment'

            Parameter:
                name = 'migrate_fraction'
                label = 'migrate_fraction'
                default = '0'
                choices = {'0': 0.0, '25': 0.25, '50': 0.5}
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'migrate_start'
                label = 'migrate_start'
                expression = '0.5'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'migrate_stop'
                label = 'migrate_stop'
                expression = '1.0'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'response_window'
                label = 'response_window'
                expression = '(0.0, 1.0)'
                dtype = 'object'
                scope = 'experiment'

            EnumParameter:
                name = 'reward_ambiguous_frac'
                label = 'How to reward ambiguous trials'
                compact_label = 'reward_ambiguous_frac'
                default = 'all'
                choices = {'all': 1.0, 'random 50%': 0.5, 'never': 0.0}
                scope = 'experiment'

            Parameter:
                name = 'random_seed'
                label = 'random_seed'
                default = 0
                dtype = 'int'
                scope = 'experiment'

            Parameter:
                name = 'fs'
                label = 'sampling rate (sec^-1)'
                default = 44000
                dtype = 'int'
                scope = 'experiment'

            Result:
                name = 'fg_channel'
                label = 'FG chan'

            Result:
                name = 'bg_channel'
                label = 'BG chan'

            Result:
                name = 'fg_name'
                label = 'FG'

            Result:
                name = 'bg_name'
                label = 'BG'

            Result:
                name = 'this_snr'
                label = 'Trial SNR'

            Result:
                name = 'migrate_trial'
                label = 'Moving Tar'

            # Calibration?


##
## OLD FgBgSet - To delete
##
# TODO make parallel for vowel set
def configure_fgbg_stimuli_old(event):
    # change to def configure_fgbg(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    output = controller.get_output('output_1')
    params = context.get_values()

    vv = MCWavFileSet(
        fs=output.fs, path=params['fg_path'], duration=params['fg_duration'],
        normalization=params['fg_normalization'], level=params['fg_level'],
        fit_range=params['fg_fit_range'], test_range=params['fg_test_range'],
        fit_reps=params['fg_fit_reps'], test_reps=params['fg_test_reps'],
        channel_count=params['fg_channel_count'])
    bb = MCWavFileSet(
        fs=output.fs, path=params['bg_path'], duration=params['bg_duration'],
        normalization=params['bg_normalization'], level=params['bg_level'],
        fit_range=params['bg_fit_range'], test_range=params['bg_test_range'],
        fit_reps=params['bg_fit_reps'], test_reps=params['bg_test_reps'],
        channel_count=params['bg_channel_count'])

    controller.wavset = FgBgSet_old(FgSet=vv, BgSet=bb,
                              fg_switch_channels=params['fg_switch_channels'],
                              bg_switch_channels=params['bg_switch_channels'],
                              primary_channel=params['primary_channel'],
                              combinations=params['combinations'],
                              fg_snr=params['fg_snr'],
                              fg_delay=params['fg_delay'],
                              migrate_fraction=params['migrate_fraction'],
                              migrate_start=params['migrate_start'],
                              migrate_stop=params['migrate_stop'],
                              reward_ambiguous_frac=params['reward_ambiguous_frac'],
                              random_seed=params['random_seed']
                              )

enamldef FgBgSetManifest_old(ExperimentManifest): manifest:

    id = 'fgbgset'

    Extension:
        id = manifest.id + '.behavior_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'configure_stimuli'
            handler = configure_fgbg_stimuli

    Extension:
        id = manifest.id + '.items'
        point = 'psi.context.items'

        ContextGroup:
            # FgBgSet generates a waveform for each trial
            # has two children: FgSet and BgSet, both of
            # which are instances of MultichannelWaveformSet
            # and are defined below
            name = 'FgBgSet'

            EnumParameter:
                name = 'combinations'
                label = 'how to combine fg and bg waveforms'
                compact_label = 'combinations'
                default = 'simple'
                choices = {'simple': "'simple'", 'all': "'all'"}
                scope = 'experiment'

            EnumParameter:
                name = 'fg_switch_channels'
                label = 'fg_switch_channels'
                compact_label = 'fg_switch_channels'
                default = 'No'
                choices = {'No': "False", 'Yes': "True"}
                scope = 'experiment'

            EnumParameter:
                name = 'bg_switch_channels'
                label = 'bg_switch_channels'
                compact_label = 'bg_switch_channels'
                default = 'No'
                choices = {'No': "False", 'same': "'same'",
                           'opposite': "'opposite'",
                           'combinatorial': "'combinatorial'",
                           'combinatorial+diotic': "'combinatorial+diotic'",
                           }
                scope = 'experiment'

            EnumParameter:
                name = 'primary_channel'
                label = 'primary_channel'
                compact_label = 'primary_channel'
                default = '0'
                choices = {'0': 0, '1': 1}
                scope = 'experiment'

            Parameter:
                name = 'fg_go_index'
                label = 'fg_go_index'
                expression = 'None'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'fg_delay'
                label = 'fg_delay'
                expression = '1.0'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'fg_snr'
                label = 'fg_snr'
                expression = '0.0'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'response_window'
                label = 'response_window'
                expression = '(0.0, 1.0)'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'migrate_fraction'
                label = 'migrate_fraction'
                expression = '0.0'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'migrate_start'
                label = 'migrate_start'
                expression = '0.5'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'migrate_stop'
                label = 'migrate_stop'
                expression = '1.0'
                dtype = 'object'
                scope = 'experiment'

            EnumParameter:
                name = 'reward_ambiguous_frac'
                label = 'How to reward ambiguous trials'
                compact_label = 'reward_ambiguous_frac'
                default = 'all'
                choices = {'all': 1.0, 'random 50%': 0.5, 'never': 0.0}
                scope = 'experiment'

            Parameter:
                name = 'random_seed'
                label = 'random_seed'
                default = 0
                dtype = 'int'
                scope = 'experiment'

            Result:
                name = 'fg_channel'
                label = 'FG chan'

            Result:
                name = 'bg_channel'
                label = 'BG chan'

            Result:
                name = 'fg_name'
                label = 'FG'

            Result:
                name = 'bg_name'
                label = 'BG'

            Result:
                name = 'this_snr'
                label = 'Trial SNR'

            Result:
                name = 'migrate_trial'
                label = 'Moving Tar'

        ContextGroup:
            # Instance of MultichannelWaveformSet, defines
            # foreground (target) stimuli
            name = 'Foreground wave file set'
            label = 'FgSet'

            Parameter:
                name = 'fg_path'
                label = 'folder'
                dtype = 'S'
                scope = 'experiment'

            Parameter:
                name = 'fg_level'
                label = 'level (dB peSPL)'
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'fg_duration'
                label = 'duration (s)'
                default = -1
                dtype = 'double'
                scope = 'experiment'

            EnumParameter:
                name = 'fg_normalization'
                label = 'normalization'
                compact_label = 'norm'
                default = 'max'
                choices = {'max': "'pe'", 'RMS': "'rms'", 'fixed': "'fixed'"}
                scope = 'experiment'

            Parameter:
                name = 'fg_norm_fixed_scale'
                label = 'fixed norm value'
                default = 1
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'fg_fit_range'
                label = 'Fit Index Range'
                expression = 'slice(None)'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'fg_fit_reps'
                label = 'Fit Reps'
                default = 1
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'fg_test_range'
                label = 'Test Index Range'
                expression = 'slice(0)'
                dtype = 'object'

            Parameter:
                name = 'fg_test_reps'
                label = 'Test Reps'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'fg_channel_count'
                label = 'number of channels'
                default = 1
                dtype = 'int'

            EnumParameter:
                name = 'fg_binaural_combinations'
                label = 'how to combine wavs for binaural condition'
                compact_label = 'bin_comb'
                default = 'single_offset'
                choices = {'single_offset': "'single_offset'", 'all': "'all'"}

            Parameter:
                name = 'fg_channel_offset'
                label = 'index offset between binaural stim'
                default = 1
                dtype = 'int'

            # Calibration?

        ContextGroup:
            # Instance of MultichannelWaveformSet, defines
            # background stimuli in FgBgSet
            name = 'Background wave file set'
            label = 'BgSet'

            Parameter:
                name = 'bg_path'
                label = 'folder'
                dtype = 'S'

            Parameter:
                name = 'bg_level'
                label = 'level (dB peSPL)'
                dtype = 'double'

            Parameter:
                name = 'bg_duration'
                label = 'duration (s)'
                default = -1
                dtype = 'double'

            EnumParameter:
                name = 'bg_normalization'
                label = 'normalization'
                compact_label = 'norm'
                default = 'max'
                choices = {'max': "'pe'", 'RMS': "'rms'", 'fixed': "'fixed'"}

            Parameter:
                name = 'bg_norm_fixed_scale'
                label = 'fixed norm value'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'bg_fit_range'
                label = 'Fit Index Range'
                expression = 'slice(None)'
                dtype = 'object'

            Parameter:
                name = 'bg_fit_reps'
                label = 'Fit Reps'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'bg_test_range'
                label = 'Test Index Range'
                expression = 'slice(0)'
                dtype = 'object'

            Parameter:
                name = 'bg_test_reps'
                label = 'Test Reps'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'bg_channel_count'
                label = 'number of channels'
                default = 1
                dtype = 'int'

            EnumParameter:
                name = 'bg_binaural_combinations'
                label = 'how to combine wavs for binaural condition'
                compact_label = 'bin_comb'
                default = 'single_offset'
                choices = {'single_offset': "'single_offset'", 'all': "'all'"}

            Parameter:
                name = 'bg_channel_offset'
                label = 'index offset between binaural stim'
                default = 1
                dtype = 'int'

            # Calibration?





# TODO make parallel for vowel set
def configure_vowelset_stimuli(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    output = controller.get_output('output_1')
    n_response = getattr(controller, 'N_response', 2)
    params = context.get_values()

    controller.wavset = VowelSet(
        sound_path=params['sound_path'],
        target_set=params['target_set'],
        non_target_set=params['non_target_set'],
        catch_set=params['catch_set'],
        switch_channels=params['switch_channels'],
        primary_channel=params['primary_channel'],
        duration=params['duration'],
        repeat_count=params['repeat_count'],
        repeat_isi=params['repeat_isi'],
        tar_to_cat_ratio=params['tar_to_cat_ratio'],
        level=params['level'],
        fs=params['fs'],
        response_start=params['response_start'],
        response_end=params['response_end'],
        random_seed=params['random_seed'],
        n_response=n_response
    )

#
# TODO This is a stub. Make this work with VowelSet instead of FgBgSet
enamldef VowelSetManifest(ExperimentManifest): manifest:

    id = 'vowelset'

    Extension:
        id = manifest.id + '.behavior_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'configure_stimuli'
            handler = configure_vowelset_stimuli

    Extension:
        id = manifest.id + '.items'
        point = 'psi.context.items'

        ContextGroup:
            # FgBgSet generates a waveform for each trial
            # has two children: FgSet and BgSet, both of
            # which are instances of MultichannelWaveformSet
            # and are defined below
            name = 'VowelSet'

            Parameter:
                name = 'sound_path'
                label = 'folder'
                dtype = 'S'
                scope = 'experiment'

            Parameter:
                name = 'target_set'
                label = 'Target names (list)'
                expression = '["EH_106"]'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'non_target_set'
                label = 'Non-target names (list)'
                expression = '[]'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'catch_set'
                label = 'Catch names (list)'
                expression = '[]'
                dtype = 'object'
                scope = 'experiment'

            EnumParameter:
                name = 'switch_channels'
                label = 'Targets from both sides?'
                compact_label = 'combinations'
                default = 'No'
                choices = {'No': "False", 'Yes': "True"}
                scope = 'experiment'

            EnumParameter:
                name = 'primary_channel'
                label = 'primary_channel'
                compact_label = 'primary_channel'
                default = '0'
                choices = {'0': 0, '1': 1}
                scope = 'experiment'

            Parameter:
                name = 'duration'
                label = 'duration of each sample (s)'
                default = 0.24
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'repeat_count'
                label = 'repeats per trial'
                default = 2
                dtype = 'int'
                scope = 'experiment'

            Parameter:
                name = 'repeat_isi'
                label = 'ISI between repeats (s)'
                default = 0.2
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'tar_to_cat_ratio'
                label = 'Ratio of tar to catch trials'
                default = 5
                dtype = 'int'
                scope = 'experiment'

            Parameter:
                name = 'level'
                label = 'level (dB peSPL)'
                default = 60
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'fs'
                label = 'sampling rate (1/s)'
                default = 44000
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'response_start'
                label = 'response win start (s)'
                default = 0
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'response_end'
                label = 'response win end (s)'
                default = 2
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'random_seed'
                label = 'random_seed'
                default = 0
                dtype = 'int'
                scope = 'experiment'

            Result:
                name = 's1_name'
                label = 'S1'

            Result:
                name = 's2_name'
                label = 'S2'
            # Calibration?


def configure_category_stimuli(event):
    context = event.workbench.get_plugin('psi.context')
    controller = event.workbench.get_plugin('psi.controller')
    output = controller.get_output('output_1')
    params = context.get_values()

    ff = MCWavFileSet(
        fs=output.fs, path=params['fg_path'], duration=params['fg_duration'],
        normalization=params['fg_normalization'], level=params['fg_level'],
        fit_range=params['fg_fit_range'], test_range=params['fg_test_range'],
        fit_reps=params['fg_fit_reps'], test_reps=params['fg_test_reps'],
        channel_count=params['fg_channel_count'])
    bb = MCWavFileSet(
        fs=output.fs, path=params['bg_path'], duration=params['bg_duration'],
        normalization=params['bg_normalization'], level=params['bg_level'],
        fit_range=params['bg_fit_range'], test_range=params['bg_test_range'],
        fit_reps=params['bg_fit_reps'], test_reps=params['bg_test_reps'],
        channel_count=params['bg_channel_count'])
    # TODO : support for FG catch
    ffc=None
    #ffc = MCWavFileSet(
    #    fs=output.fs, path=params['fg_path'], duration=params['fg_duration'],
    #    normalization=params['fg_normalization'], level=params['fg_level'],
    #    fit_range=params['fg_fit_range'], test_range=params['fg_test_range'],
    #    fit_reps=params['fg_fit_reps'], test_reps=params['fg_test_reps'],
    #    channel_count=params['fg_channel_count'])
    bbc = MCWavFileSet(
        fs=output.fs, path=params['bgc_path'], duration=params['bgc_duration'],
        normalization=params['bgc_normalization'], level=params['bgc_level'],
        fit_range=params['bgc_fit_range'], test_range=params['bgc_test_range'],
        fit_reps=params['bgc_fit_reps'], test_reps=params['bgc_test_reps'],
        channel_count=params['bgc_channel_count'],filelabels='C')
    oan = MCWavFileSet(
        fs=output.fs, path=params['oan_path'], duration=params['bgc_duration'],
        normalization=params['bgc_normalization'], level=params['bgc_level'],
        fit_range=params['bgc_fit_range'], test_range=params['bgc_test_range'],
        fit_reps=params['bgc_fit_reps'], test_reps=params['bgc_test_reps'],
        channel_count=params['bgc_channel_count'])

    controller.wavset = CategorySet(FgSet=ff, BgSet=bb,
                                CatchFgSet=ffc, CatchBgSet=bbc, OAnoiseSet=oan,
                                fg_switch_channels=params['fg_switch_channels'],
                                bg_switch_channels=params['bg_switch_channels'],
                                primary_channel=params['primary_channel'],
                                combinations=params['combinations'],
                                fg_snr=params['fg_snr'],
                                fg_delay=params['fg_delay'],
                                # migrate_fraction=params['migrate_fraction'],
                                # migrate_start=params['migrate_start'],
                                # migrate_stop=params['migrate_stop'],
                                random_seed=params['random_seed'],
                                # CatchFG_frac=params['CatchFG_frac'],
                                # CatchBG_frac=params['CatchBG_frac'],
                                catch_ferret_id=params['catch_ferret_id'],
                                n_env_bands=params['n_env_bands'],
                                unique_overall_SNR=params['unique_overall_SNR'],
                              )

enamldef CategorySetManifest(ExperimentManifest): manifest:

    id = 'categoryset'

    Extension:
        id = manifest.id + '.behavior_commands'
        point = 'enaml.workbench.core.commands'
        Command:
            id = 'configure_stimuli'
            handler = configure_category_stimuli

    Extension:
        id = manifest.id + '.items'
        point = 'psi.context.items'

        ContextGroup:
            # FgBgSet generates a waveform for each trial
            # has two children: FgSet and BgSet, both of
            # which are instances of MultichannelWaveformSet
            # and are defined below
            name = 'CategorySet'

            EnumParameter:
                name = 'combinations'
                label = 'how to combine fg and bg waveforms'
                compact_label = 'combinations'
                default = 'custom'
                choices = {'simple': "'simple'", 'all': "'all'", 'custom': "'custom'"}
                scope = 'experiment'

            EnumParameter:
                name = 'fg_switch_channels'
                label = 'fg_switch_channels'
                compact_label = 'fg_switch_channels'
                default = 'No'
                choices = {'No': "False", 'Yes': "True"}
                scope = 'experiment'

            EnumParameter:
                name = 'bg_switch_channels'
                label = 'bg_switch_channels'
                compact_label = 'bg_switch_channels'
                default = 'No'
                choices = {'No': "False", 'same': "'same'",
                           'opposite': "'opposite'",
                           # 'combinatorial': "'combinatorial'",
                           # 'combinatorial+diotic': "'combinatorial+diotic'",
                           }
                scope = 'experiment'

            EnumParameter:
                name = 'primary_channel'
                label = 'primary_channel'
                compact_label = 'primary_channel'
                default = '0'
                choices = {'0': 0, '1': 1}
                scope = 'experiment'

            Parameter:
                name = 'fg_go_index'
                label = 'fg_go_index'
                expression = 'None'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'fg_delay'
                label = 'fg_delay'
                expression = '1.0'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'fg_snr'
                label = 'fg_snr'
                expression = '0.0'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'CatchFG_frac'
                label = 'CatchFG_frac'
                expression = '0.0'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'CatchBG_frac'
                label = 'CatchBG_frac'
                expression = '0.5'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'catch_ferret_id'
                label = 'catch_ferret_id'
                expression = '3'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'n_env_bands'
                label = 'n_env_bands'
                expression = '[2, 8, 32]'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'reg2catch_ratio'
                label = 'reg2catch_ratio'
                expression = '6'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'unique_overall_SNR'
                label = 'unique_overall_SNR'
                expression = '[np.inf]'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'response_window'
                label = 'response_window'
                expression = '(0.0, 1.0)'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'migrate_fraction'
                label = 'migrate_fraction'
                expression = '0.0'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'migrate_start'
                label = 'migrate_start'
                expression = '0.5'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'migrate_stop'
                label = 'migrate_stop'
                expression = '1.0'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'random_seed'
                label = 'random_seed'
                default = 0
                dtype = 'int'
                scope = 'experiment'

            Result:
                name = 'fg_channel'
                label = 'FG chan'

            Result:
                name = 'bg_channel'
                label = 'BG chan'

            Result:
                name = 'fg_name'
                label = 'FG'

            Result:
                name = 'bg_name'
                label = 'BG'

            Result:
                name = 'this_snr'
                label = 'Trial SNR'

            Result:
                name = 'migrate_trial'
                label = 'Moving Tar'

        ContextGroup:
            # Instance of MultichannelWaveformSet, defines
            # foreground (target) stimuli
            name = 'Foreground wave file set'
            label = 'FgSet'

            Parameter:
                name = 'fg_path'
                label = 'folder'
                dtype = 'S'
                scope = 'experiment'

            Parameter:
                name = 'fg_level'
                label = 'level (dB peSPL)'
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'fg_duration'
                label = 'duration (s)'
                default = -1
                dtype = 'double'
                scope = 'experiment'

            EnumParameter:
                name = 'fg_normalization'
                label = 'normalization'
                compact_label = 'norm'
                default = 'max'
                choices = {'max': "'pe'", 'RMS': "'rms'", 'fixed': "'fixed'"}
                scope = 'experiment'

            Parameter:
                name = 'fg_norm_fixed_scale'
                label = 'fixed norm value'
                default = 1
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'fg_fit_range'
                label = 'Fit Index Range'
                expression = 'slice(None)'
                dtype = 'object'
                scope = 'experiment'

            Parameter:
                name = 'fg_fit_reps'
                label = 'Fit Reps'
                default = 1
                dtype = 'double'
                scope = 'experiment'

            Parameter:
                name = 'fg_test_range'
                label = 'Test Index Range'
                expression = 'slice(0)'
                dtype = 'object'

            Parameter:
                name = 'fg_test_reps'
                label = 'Test Reps'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'fg_channel_count'
                label = 'number of channels'
                default = 1
                dtype = 'int'

            EnumParameter:
                name = 'fg_binaural_combinations'
                label = 'how to combine wavs for binaural condition'
                compact_label = 'bin_comb'
                default = 'single_offset'
                choices = {'single_offset': "'single_offset'", 'all': "'all'"}

            Parameter:
                name = 'fg_channel_offset'
                label = 'index offset between binaural stim'
                default = 1
                dtype = 'int'

            # Calibration?

        ContextGroup:
            # Instance of MultichannelWaveformSet, defines
            # background stimuli in FgBgSet
            name = 'Background wave file set'
            label = 'BgSet'

            Parameter:
                name = 'bg_path'
                label = 'folder'
                dtype = 'S'

            Parameter:
                name = 'bg_level'
                label = 'level (dB peSPL)'
                dtype = 'double'

            Parameter:
                name = 'bg_duration'
                label = 'duration (s)'
                default = -1
                dtype = 'double'

            EnumParameter:
                name = 'bg_normalization'
                label = 'normalization'
                compact_label = 'norm'
                default = 'max'
                choices = {'max': "'pe'", 'RMS': "'rms'", 'fixed': "'fixed'"}

            Parameter:
                name = 'bg_norm_fixed_scale'
                label = 'fixed norm value'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'bg_fit_range'
                label = 'Fit Index Range'
                expression = 'slice(None)'
                dtype = 'object'

            Parameter:
                name = 'bg_fit_reps'
                label = 'Fit Reps'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'bg_test_range'
                label = 'Test Index Range'
                expression = 'slice(0)'
                dtype = 'object'

            Parameter:
                name = 'bg_test_reps'
                label = 'Test Reps'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'bg_channel_count'
                label = 'number of channels'
                default = 1
                dtype = 'int'

            EnumParameter:
                name = 'bg_binaural_combinations'
                label = 'how to combine wavs for binaural condition'
                compact_label = 'bin_comb'
                default = 'single_offset'
                choices = {'single_offset': "'single_offset'", 'all': "'all'"}

            Parameter:
                name = 'bg_channel_offset'
                label = 'index offset between binaural stim'
                default = 1
                dtype = 'int'

            # Calibration?

        ContextGroup:
            # Instance of MultichannelWaveformSet, defines
            # catch background stimuli in CategorySet
            name = 'Catch background wave file set'
            label = 'CatchBgSet'

            Parameter:
                name = 'bgc_path'
                label = 'folder'
                dtype = 'S'

            Parameter:
                name = 'oan_path'
                label = 'noise folder'
                dtype = 'S'

            Parameter:
                name = 'bgc_level'
                label = 'level (dB peSPL)'
                dtype = 'double'

            Parameter:
                name = 'bgc_duration'
                label = 'duration (s)'
                default = -1
                dtype = 'double'

            EnumParameter:
                name = 'bgc_normalization'
                label = 'normalization'
                compact_label = 'norm'
                default = 'max'
                choices = {'max': "'pe'", 'RMS': "'rms'", 'fixed': "'fixed'"}

            Parameter:
                name = 'bgc_norm_fixed_scale'
                label = 'fixed norm value'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'bgc_fit_range'
                label = 'Fit Index Range'
                expression = 'slice(None)'
                dtype = 'object'

            Parameter:
                name = 'bgc_fit_reps'
                label = 'Fit Reps'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'bgc_test_range'
                label = 'Test Index Range'
                expression = 'slice(0)'
                dtype = 'object'

            Parameter:
                name = 'bgc_test_reps'
                label = 'Test Reps'
                default = 1
                dtype = 'double'

            Parameter:
                name = 'bgc_channel_count'
                label = 'number of channels'
                default = 1
                dtype = 'int'

            EnumParameter:
                name = 'bgc_binaural_combinations'
                label = 'how to combine wavs for binaural condition'
                compact_label = 'bin_comb'
                default = 'single_offset'
                choices = {'single_offset': "'single_offset'", 'all': "'all'"}

            Parameter:
                name = 'bgc_channel_offset'
                label = 'index offset between binaural stim'
                default = 1
                dtype = 'int'

            # Calibration?

